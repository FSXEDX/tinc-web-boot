package internal

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Share) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Port, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "Port")
		return
	}
	z.Subnet, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Subnet")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Addresses")
		return
	}
	if cap(z.Addresses) >= int(zb0002) {
		z.Addresses = (z.Addresses)[:zb0002]
	} else {
		z.Addresses = make([][4]byte, zb0002)
	}
	for za0001 := range z.Addresses {
		err = dc.ReadExactBytes((z.Addresses[za0001])[:])
		if err != nil {
			err = msgp.WrapError(err, "Addresses", za0001)
			return
		}
	}
	z.Network, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Network")
		return
	}
	z.Code, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Share) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Port)
	if err != nil {
		err = msgp.WrapError(err, "Port")
		return
	}
	err = en.WriteString(z.Subnet)
	if err != nil {
		err = msgp.WrapError(err, "Subnet")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Addresses)))
	if err != nil {
		err = msgp.WrapError(err, "Addresses")
		return
	}
	for za0001 := range z.Addresses {
		err = en.WriteBytes((z.Addresses[za0001])[:])
		if err != nil {
			err = msgp.WrapError(err, "Addresses", za0001)
			return
		}
	}
	err = en.WriteString(z.Network)
	if err != nil {
		err = msgp.WrapError(err, "Network")
		return
	}
	err = en.WriteString(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Share) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o = msgp.AppendUint16(o, z.Port)
	o = msgp.AppendString(o, z.Subnet)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Addresses)))
	for za0001 := range z.Addresses {
		o = msgp.AppendBytes(o, (z.Addresses[za0001])[:])
	}
	o = msgp.AppendString(o, z.Network)
	o = msgp.AppendString(o, z.Code)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Share) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Port, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Port")
		return
	}
	z.Subnet, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Subnet")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Addresses")
		return
	}
	if cap(z.Addresses) >= int(zb0002) {
		z.Addresses = (z.Addresses)[:zb0002]
	} else {
		z.Addresses = make([][4]byte, zb0002)
	}
	for za0001 := range z.Addresses {
		bts, err = msgp.ReadExactBytes(bts, (z.Addresses[za0001])[:])
		if err != nil {
			err = msgp.WrapError(err, "Addresses", za0001)
			return
		}
	}
	z.Network, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Network")
		return
	}
	z.Code, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Share) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + msgp.StringPrefixSize + len(z.Subnet) + msgp.ArrayHeaderSize + (len(z.Addresses) * (4 * (msgp.ByteSize))) + msgp.StringPrefixSize + len(z.Network) + msgp.StringPrefixSize + len(z.Code)
	return
}

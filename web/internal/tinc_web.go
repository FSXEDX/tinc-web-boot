// Code generated by jsonrpc2. DO NOT EDIT.
//go:generate jsonrpc2-gen -f ../../jsonrpc2.yaml -I TincWeb -I TincWebUI -I TincWebMajordomo
package internal

import (
	"context"
	"encoding/json"
	jsonrpc2 "github.com/reddec/jsonrpc2"
	network "github.com/tinc-boot/tincd/network"
	"time"
	shared "tinc-web-boot/web/shared"
)

func RegisterTincWeb(router *jsonrpc2.Router, wrap shared.TincWeb) []string {
	router.RegisterFunc("TincWeb.Networks", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct{}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Networks(ctx)
	})

	router.RegisterFunc("TincWeb.Network", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"name"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Network(ctx, args.Arg0)
	})

	router.RegisterFunc("TincWeb.Create", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"name"`
			Arg1 string `json:"subnet"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Create(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("TincWeb.Remove", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"network"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Remove(ctx, args.Arg0)
	})

	router.RegisterFunc("TincWeb.Start", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"network"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Start(ctx, args.Arg0)
	})

	router.RegisterFunc("TincWeb.Stop", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"network"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Stop(ctx, args.Arg0)
	})

	router.RegisterFunc("TincWeb.Peers", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"network"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Peers(ctx, args.Arg0)
	})

	router.RegisterFunc("TincWeb.Peer", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"network"`
			Arg1 string `json:"name"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Peer(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("TincWeb.Import", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 shared.Sharing `json:"sharing"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Import(ctx, args.Arg0)
	})

	router.RegisterFunc("TincWeb.Share", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"network"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Share(ctx, args.Arg0)
	})

	router.RegisterFunc("TincWeb.Node", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"network"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Node(ctx, args.Arg0)
	})

	router.RegisterFunc("TincWeb.Upgrade", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string          `json:"network"`
			Arg1 network.Upgrade `json:"update"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Upgrade(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("TincWeb.Majordomo", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string        `json:"network"`
			Arg1 time.Duration `json:"lifetime"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Majordomo(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("TincWeb.Join", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"url"`
			Arg1 bool   `json:"start"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Join(ctx, args.Arg0, args.Arg1)
	})

	return []string{"TincWeb.Networks", "TincWeb.Network", "TincWeb.Create", "TincWeb.Remove", "TincWeb.Start", "TincWeb.Stop", "TincWeb.Peers", "TincWeb.Peer", "TincWeb.Import", "TincWeb.Share", "TincWeb.Node", "TincWeb.Upgrade", "TincWeb.Majordomo", "TincWeb.Join"}
}
